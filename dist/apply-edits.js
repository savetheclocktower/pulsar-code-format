"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyEditsToUnopenBuffer = exports.applyEditsToOpenEditor = void 0;
const MARKER_LAYERS_FOR_EDITORS = new WeakMap();
const MARKER_LAYERS_FOR_BUFFERS = new WeakMap();
function findOrCreateMarkerLayerForEditor(editor) {
    let layer = MARKER_LAYERS_FOR_EDITORS.get(editor);
    if (!layer) {
        layer = editor.addMarkerLayer({ maintainHistory: true });
        MARKER_LAYERS_FOR_EDITORS.set(editor, layer);
    }
    return layer;
}
function findOrCreateMarkerLayerForBuffer(buffer) {
    let layer = MARKER_LAYERS_FOR_BUFFERS.get(buffer);
    if (!layer) {
        layer = buffer.addMarkerLayer({ maintainHistory: true });
        MARKER_LAYERS_FOR_BUFFERS.set(buffer, layer);
    }
    return layer;
}
// Applies the given edits to a `TextEditor` instance that is present in the
// workspace.
function applyEditsToOpenEditor(editor, edits) {
    let buffer = editor.getBuffer();
    const checkpoint = buffer.createCheckpoint();
    try {
        let layer = findOrCreateMarkerLayerForEditor(editor);
        let markerMap = new Map();
        for (let edit of edits) {
            let marker = layer.markBufferRange(edit.oldRange);
            markerMap.set(edit, marker);
        }
        for (let edit of edits) {
            let marker = markerMap.get(edit);
            if (!marker)
                throw new Error(`Marker missing range!`);
            buffer.setTextInRange(marker.getBufferRange(), edit.newText);
        }
        buffer.groupChangesSinceCheckpoint(checkpoint);
        return checkpoint;
    }
    catch (err) {
        buffer.revertToCheckpoint(checkpoint);
        throw err;
    }
}
exports.applyEditsToOpenEditor = applyEditsToOpenEditor;
// Applies the given edits to a `TextBuffer` instance representing a file
// that is not currently open in the workspace.
function applyEditsToUnopenBuffer(buffer, edits) {
    const checkpoint = buffer.createCheckpoint();
    try {
        let layer = findOrCreateMarkerLayerForBuffer(buffer);
        let markerMap = new Map();
        for (let edit of edits) {
            let marker = layer.markRange(edit.oldRange);
            markerMap.set(edit, marker);
        }
        for (let edit of edits) {
            let marker = markerMap.get(edit);
            if (!marker)
                throw new Error(`Marker missing range!`);
            buffer.setTextInRange(marker.getRange(), edit.newText);
        }
        buffer.groupChangesSinceCheckpoint(checkpoint);
        return checkpoint;
    }
    catch (err) {
        buffer.revertToCheckpoint(checkpoint);
        throw err;
    }
}
exports.applyEditsToUnopenBuffer = applyEditsToUnopenBuffer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbHktZWRpdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvYXBwbHktZWRpdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0EsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO0FBQ2hELE1BQU0seUJBQXlCLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztBQUVoRCxTQUFTLGdDQUFnQyxDQUFDLE1BQWtCO0lBQzFELElBQUksS0FBSyxHQUFHLHlCQUF5QixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsRCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDWCxLQUFLLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFDLGVBQWUsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBQ3ZELHlCQUF5QixDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVELFNBQVMsZ0NBQWdDLENBQUMsTUFBa0I7SUFDMUQsSUFBSSxLQUFLLEdBQUcseUJBQXlCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xELElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNYLEtBQUssR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUMsZUFBZSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7UUFDdkQseUJBQXlCLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRUQsNEVBQTRFO0FBQzVFLGFBQWE7QUFDYixTQUFnQixzQkFBc0IsQ0FBQyxNQUFrQixFQUFFLEtBQWlCO0lBQzFFLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNoQyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUM3QyxJQUFJLENBQUM7UUFDSCxJQUFJLEtBQUssR0FBRyxnQ0FBZ0MsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyRCxJQUFJLFNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQzFCLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxFQUFFLENBQUM7WUFDdkIsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbEQsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDOUIsQ0FBQztRQUVELEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxFQUFFLENBQUM7WUFDdkIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNqQyxJQUFJLENBQUMsTUFBTTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7WUFDdEQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9ELENBQUM7UUFDRCxNQUFNLENBQUMsMkJBQTJCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDL0MsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztJQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDYixNQUFNLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEMsTUFBTSxHQUFHLENBQUM7SUFDWixDQUFDO0FBQ0gsQ0FBQztBQXRCRCx3REFzQkM7QUFFRCx5RUFBeUU7QUFDekUsK0NBQStDO0FBQy9DLFNBQWdCLHdCQUF3QixDQUFDLE1BQWtCLEVBQUUsS0FBaUI7SUFDNUUsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDN0MsSUFBSSxDQUFDO1FBQ0gsSUFBSSxLQUFLLEdBQUcsZ0NBQWdDLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDckQsSUFBSSxTQUFTLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUMxQixLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRSxDQUFDO1lBQ3ZCLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzVDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzlCLENBQUM7UUFFRCxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRSxDQUFDO1lBQ3ZCLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDakMsSUFBSSxDQUFDLE1BQU07Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBQ3RELE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6RCxDQUFDO1FBQ0QsTUFBTSxDQUFDLDJCQUEyQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQy9DLE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsTUFBTSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sR0FBRyxDQUFDO0lBQ1osQ0FBQztBQUNILENBQUM7QUFyQkQsNERBcUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUZXh0QnVmZmVyLCBUZXh0RWRpdG9yfSBmcm9tICdhdG9tJztcbmltcG9ydCB7VGV4dEVkaXR9IGZyb20gXCJhdG9tLWlkZS1iYXNlXCI7XG5cbmNvbnN0IE1BUktFUl9MQVlFUlNfRk9SX0VESVRPUlMgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgTUFSS0VSX0xBWUVSU19GT1JfQlVGRkVSUyA9IG5ldyBXZWFrTWFwKCk7XG5cbmZ1bmN0aW9uIGZpbmRPckNyZWF0ZU1hcmtlckxheWVyRm9yRWRpdG9yKGVkaXRvcjogVGV4dEVkaXRvcikge1xuICBsZXQgbGF5ZXIgPSBNQVJLRVJfTEFZRVJTX0ZPUl9FRElUT1JTLmdldChlZGl0b3IpO1xuICBpZiAoIWxheWVyKSB7XG4gICAgbGF5ZXIgPSBlZGl0b3IuYWRkTWFya2VyTGF5ZXIoe21haW50YWluSGlzdG9yeTogdHJ1ZX0pO1xuICAgIE1BUktFUl9MQVlFUlNfRk9SX0VESVRPUlMuc2V0KGVkaXRvciwgbGF5ZXIpO1xuICB9XG4gIHJldHVybiBsYXllcjtcbn1cblxuZnVuY3Rpb24gZmluZE9yQ3JlYXRlTWFya2VyTGF5ZXJGb3JCdWZmZXIoYnVmZmVyOiBUZXh0QnVmZmVyKSB7XG4gIGxldCBsYXllciA9IE1BUktFUl9MQVlFUlNfRk9SX0JVRkZFUlMuZ2V0KGJ1ZmZlcik7XG4gIGlmICghbGF5ZXIpIHtcbiAgICBsYXllciA9IGJ1ZmZlci5hZGRNYXJrZXJMYXllcih7bWFpbnRhaW5IaXN0b3J5OiB0cnVlfSk7XG4gICAgTUFSS0VSX0xBWUVSU19GT1JfQlVGRkVSUy5zZXQoYnVmZmVyLCBsYXllcik7XG4gIH1cbiAgcmV0dXJuIGxheWVyO1xufVxuXG4vLyBBcHBsaWVzIHRoZSBnaXZlbiBlZGl0cyB0byBhIGBUZXh0RWRpdG9yYCBpbnN0YW5jZSB0aGF0IGlzIHByZXNlbnQgaW4gdGhlXG4vLyB3b3Jrc3BhY2UuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlFZGl0c1RvT3BlbkVkaXRvcihlZGl0b3I6IFRleHRFZGl0b3IsIGVkaXRzOiBUZXh0RWRpdFtdKSB7XG4gIGxldCBidWZmZXIgPSBlZGl0b3IuZ2V0QnVmZmVyKCk7XG4gIGNvbnN0IGNoZWNrcG9pbnQgPSBidWZmZXIuY3JlYXRlQ2hlY2twb2ludCgpO1xuICB0cnkge1xuICAgIGxldCBsYXllciA9IGZpbmRPckNyZWF0ZU1hcmtlckxheWVyRm9yRWRpdG9yKGVkaXRvcik7XG4gICAgbGV0IG1hcmtlck1hcCA9IG5ldyBNYXAoKTtcbiAgICBmb3IgKGxldCBlZGl0IG9mIGVkaXRzKSB7XG4gICAgICBsZXQgbWFya2VyID0gbGF5ZXIubWFya0J1ZmZlclJhbmdlKGVkaXQub2xkUmFuZ2UpO1xuICAgICAgbWFya2VyTWFwLnNldChlZGl0LCBtYXJrZXIpO1xuICAgIH1cblxuICAgIGZvciAobGV0IGVkaXQgb2YgZWRpdHMpIHtcbiAgICAgIGxldCBtYXJrZXIgPSBtYXJrZXJNYXAuZ2V0KGVkaXQpO1xuICAgICAgaWYgKCFtYXJrZXIpIHRocm93IG5ldyBFcnJvcihgTWFya2VyIG1pc3NpbmcgcmFuZ2UhYCk7XG4gICAgICBidWZmZXIuc2V0VGV4dEluUmFuZ2UobWFya2VyLmdldEJ1ZmZlclJhbmdlKCksIGVkaXQubmV3VGV4dCk7XG4gICAgfVxuICAgIGJ1ZmZlci5ncm91cENoYW5nZXNTaW5jZUNoZWNrcG9pbnQoY2hlY2twb2ludCk7XG4gICAgcmV0dXJuIGNoZWNrcG9pbnQ7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGJ1ZmZlci5yZXZlcnRUb0NoZWNrcG9pbnQoY2hlY2twb2ludCk7XG4gICAgdGhyb3cgZXJyO1xuICB9XG59XG5cbi8vIEFwcGxpZXMgdGhlIGdpdmVuIGVkaXRzIHRvIGEgYFRleHRCdWZmZXJgIGluc3RhbmNlIHJlcHJlc2VudGluZyBhIGZpbGVcbi8vIHRoYXQgaXMgbm90IGN1cnJlbnRseSBvcGVuIGluIHRoZSB3b3Jrc3BhY2UuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlFZGl0c1RvVW5vcGVuQnVmZmVyKGJ1ZmZlcjogVGV4dEJ1ZmZlciwgZWRpdHM6IFRleHRFZGl0W10pIHtcbiAgY29uc3QgY2hlY2twb2ludCA9IGJ1ZmZlci5jcmVhdGVDaGVja3BvaW50KCk7XG4gIHRyeSB7XG4gICAgbGV0IGxheWVyID0gZmluZE9yQ3JlYXRlTWFya2VyTGF5ZXJGb3JCdWZmZXIoYnVmZmVyKTtcbiAgICBsZXQgbWFya2VyTWFwID0gbmV3IE1hcCgpO1xuICAgIGZvciAobGV0IGVkaXQgb2YgZWRpdHMpIHtcbiAgICAgIGxldCBtYXJrZXIgPSBsYXllci5tYXJrUmFuZ2UoZWRpdC5vbGRSYW5nZSk7XG4gICAgICBtYXJrZXJNYXAuc2V0KGVkaXQsIG1hcmtlcik7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgZWRpdCBvZiBlZGl0cykge1xuICAgICAgbGV0IG1hcmtlciA9IG1hcmtlck1hcC5nZXQoZWRpdCk7XG4gICAgICBpZiAoIW1hcmtlcikgdGhyb3cgbmV3IEVycm9yKGBNYXJrZXIgbWlzc2luZyByYW5nZSFgKTtcbiAgICAgIGJ1ZmZlci5zZXRUZXh0SW5SYW5nZShtYXJrZXIuZ2V0UmFuZ2UoKSwgZWRpdC5uZXdUZXh0KTtcbiAgICB9XG4gICAgYnVmZmVyLmdyb3VwQ2hhbmdlc1NpbmNlQ2hlY2twb2ludChjaGVja3BvaW50KTtcbiAgICByZXR1cm4gY2hlY2twb2ludDtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgYnVmZmVyLnJldmVydFRvQ2hlY2twb2ludChjaGVja3BvaW50KTtcbiAgICB0aHJvdyBlcnI7XG4gIH1cbn1cbiJdfQ==